<%- include("../../views/partials/user/header") %>
<style>
 .card-green {
   background-color: #ADD8E6;
 }
 .main {
   padding: 30px 0;
 }


 .dashboard-menu {
   background-color: #cce3e6;
   border-radius: 10px;
   padding: 15px;
   box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
 }


 .dashboard-menu .nav-link {
 font-weight: bold;
 color: #30683c;
 box-shadow: 0 4px 10px rgba(123, 131, 112, 0.3), 0 4px 20px rgba(0, 191, 255, 0.2);
 transition: box-shadow 0.3s ease;
}


.dashboard-menu .nav-link:hover {
 color: #00bfff;
 box-shadow: 0 4px 15px rgba(173, 255, 47, 0.5), 0 6px 25px rgba(0, 191, 255, 0.4);
}


 .card {
   border-radius: 10px;
   box-shadow: 0 4px 10px rgba(0, 0, 0, 0.5);
   margin-bottom: 20px;
 }


 .card-header {
   background-color: #487379;
   color: white;
   border-radius: 10px 10px 0 0;
 }


 .btn-success {
   background-color: #577194;
   border-color: #6bb87d;
 }


 .btn-success:hover {
   background-color: #506955;
 }


 .form-group {
   margin-bottom: 15px;
 }


 .required {
   color: red;
 }


  @media (max-width: 768px) {
   .dashboard-menu {
     padding: 10px;
   }


   .card {
     margin-bottom: 15px;
   }
 }
 .page-header.breadcrumb-wrap {
 background-color: #eee2e9;
 padding: 15px 0;
}


.breadcrumb {
 display: flex;
 align-items: center;
 font-family: 'Arial', sans-serif;
 font-size: 16px;
 color: #121311;
}


.breadcrumb a {
 color: #007bff;
 text-decoration: none;
 position: relative;
 margin: 0 5px;
}


.breadcrumb a:hover {
 color: #0056b3;



.breadcrumb span {
 margin: 0 5px;
 color: #999



.breadcrumb a::after {
 content: '';
 position: absolute;
 width: 100%;
 height: 2px;
 background: #6e6e3a;
 left: 0;
 bottom: -2px;
 transform: scaleX(0);
 transition: transform 0.3s ease



.breadcrumb a:hover::after {
 transform: scaleX(1);
}
</style>

<section class="breadcrumb-option">
    <div class="container">
        <div class="row">
            <div class="col-lg-12">
                <div class="breadcrumb__text">
                    <h4>Account</h4>
                    <div class="breadcrumb__links">
                        <a href="/">Home</a>
                        <a href="/userProfile">Profile</a>
                        <span>Account</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>


<main class="main">
  <section class="pt-10 pb-10">
   <div class="container">
     <div class="row">
       <div class="col-lg-10 m-auto">
         <div class="row">
           <div class="col-md-4">
             <div class="dashboard-menu">
               <ul class="nav flex-column" role="tablist">
                 <li class="nav-item">
                   <a class="nav-link active" id="dashboard-tab" data-bs-toggle="tab" href="#dashboard" role="tab" aria-controls="dashboard" aria-selected="false">
                     <i class="fi-rs-settings-sliders mr-10"></i>Dashboard
                   </a>
                 </li>
                 <li class="nav-item">
                   <a class="nav-link" id="address-tab" data-bs-toggle="tab" href="#address" role="tab" aria-controls="address" aria-selected="true">
                     <i class="fi-rs-marker mr-10"></i>My Address
                   </a>
                 </li>
                 <li class="nav-item">
                   <a class="nav-link" id="orders-tab" data-bs-toggle="tab" href="#orders" role="tab" aria-controls="orders" aria-selected="false">
                     <i class="fi-rs-shopping-bag mr-10"></i>Orders
                   </a>
                 </li>
                 <li class="nav-item">
                   <a class="nav-link" id="track-orders-tab" data-bs-toggle="tab" href="#track-orders" role="tab" aria-controls="track-orders" aria-selected="false">
                     <i class="fi-rs-shopping-cart-check mr-10"></i>Wallet Status
                   </a>
                 </li>
                 <li class="nav-item">
                   <a class="nav-link" id="track-orders-tab" data-bs-toggle="tab" href="#referal" role="tab" aria-controls="track-orders" aria-selected="false">
                     <i class="fi-rs-shopping-cart-check mr-10"></i>Referals
                   </a>
                 </li>
                 <li class="nav-item">
                   <a class="nav-link" href="/logout">
                     <i class="fi-rs-sign-out mr-10"></i>Logout
                   </a>
                 </li>
               </ul>
             </div>
           </div>
           <div class="col-md-8">
             <div class="tab-content dashboard-content">


               <div class="tab-pane fade show active" id="dashboard" role="tabpanel" aria-labelledby="dashboard-tab">
                 <div class="card card-green">
                   <div class="card-header">
                     <h5 class="mb-0 text-center">User Profile</h5>
                   </div>
                   <div class="card-body text-center">
                     <h5 class="card-title"><%=user.name%></h5>
                     <p class="card-text">
                       <strong>Phone:</strong><%=user.phone%>
                     </p>
                     <p class="card-text">
                       <strong>Email:</strong><%=user.email%>
                     </p>
                     <a href="/change-password" class="btn btn-sm btn-success">Change Password</a>
                   </div>
                 </div>
               </div>


               <div class="tab-pane fade" id="address" role="tabpanel" aria-labelledby="address-tab">
                 <div class="card">
                   <div class="card-header">
                     <h5 class="mb-0">My Addresses</h5>
                   </div>
                   <div class="card-body">
                     <% if (addressData && addressData.address && addressData.address.length > 0) { %>
                       <div class="row">
                         <% addressData.address.forEach(addr => { %>
                           <div class="col-lg-6 mb-3">
                             <div class="card">
                               <div class="card-body">
                                 <h6 class="card-title"><%= addr.name %></h6>
                                 <p class="card-text">
                                   <%= addr.landMark %><br>
                                   <%= addr.city %>, <%= addr.state %><br>
                                   <%= addr.pincode %><br>
                                   Phone: <%= addr.phone %>
                                 </p>
                                 <div class="d-flex justify-content-between">
                                   <button onclick="editAddress('<%= addr._id %>')" class="btn btn-sm btn-primary">Edit</button>
                                   <button onclick="deleteAddress('<%= addr._id %>')" class="btn btn-sm btn-danger">Delete</button>
                                 </div>
                               </div>
                             </div>
                           </div>
                         <% }); %>
                       </div>
                     <% } else { %>
                       <p>No addresses found.</p>
                     <% } %>
                     <div class="mt-3">
                       <a href="/addAddress" class="btn btn-success">Add New Address</a>
                     </div>
                   </div>
                 </div>
               </div>


               <div class="tab-pane fade" id="orders" role="tabpanel" aria-labelledby="orders-tab">
                 <div class="card">
                   <div class="card-header">
                     <h5 class="mb-0">Your Orders</h5>
                   </div>
                   <div class="card-body">
                     <div class="table-responsive">
                       <table class="table">
                         <thead>
                           <tr>
                             <th>Order</th>
                             <th>Date</th>
                             <th>Status</th>
                             <th>Total</th>
                             <th>Actions</th>
                           </tr>
                         </thead>
                         <tbody>
                           <% if (orders && orders.length > 0) { %>
                             <% orders.forEach(order => { %>
                               <tr>
                                 <td>#<%= order.orderId %></td>
                                 <td><%= new Date(order.createdOn).toLocaleDateString() %></td>
                                 <td><%= order.status %></td>
                                 <td>â‚¹<%= order.finalAmount %></td>
                                 <td>
                                   <button type="button" 
                                     class="btn btn-sm btn-info view-order-btn" 
                                     data-order-id="<%= order._id %>">
                                     View
                                   </button>
                                   
                                   <% if(order.status === 'Pending')  { %>
                                     <button 
                                       type="button" 
                                       class="btn btn-sm btn-danger cancel-order-btn" 
                                       data-order-id="<%= order._id %>">
                                       Cancel
                                     </button>
                                   <% } %>
                                   <% if(order.status === 'Delivered')  { %>
                                     <button 
                                       type="button" 
                                       class="btn btn-sm btn-warning return-order-btn" 
                                       onclick="showReturnModal('<%= order.orderId %>')">
                                       Return
                                     </button>
                                   <% } %>
                                   <% if (order.paymentStatus === 'Pending' && order.paymentMethod === 'Online Payment') { %>
                                     <button class="btn btn-warning btn-sm" onclick="retryPayment('<%= order._id %>')">
                                       Retry Payment
                                     </button>
                                   <% } %>
                                 </td>
                               </tr>
                             <% }); %>
                           <% } else { %>
                             <tr>
                               <td colspan="5">No orders found</td>
                             </tr>
                           <% } %>
                         </tbody>
                       </table>
                     </div>
                   </div>
                 </div>
               </div>


               <div class="tab-pane fade" id="track-orders" role="tabpanel" aria-labelledby="track-orders-tab">
                 <div class="card">
                   <div class="card-header">
                     <h5 class="mb-0">Wallet</h5>
                   </div>
                   <div class="card-body">
                     <div class="row">
                       <div class="col-lg-12">
                         <!-- Wallet Balance Card -->
                         <div class="card mb-4 bg-light">
                           <div class="card-body text-center">
                             <h4 class="text-muted mb-3">Current Balance</h4>
                             <h2 class="text-success mb-4">â‚¹<%= user.wallet || 0 %></h2>
                             <button type="button" class="btn btn-success btn-lg px-4" onclick="addMoneyToWallet()">
                               <i class="fas fa-plus-circle me-2"></i>Add Money
                             </button>
                           </div>
                         </div>

                         <!-- Transaction History -->
                         <div class="card">
                           <div class="card-header bg-light">
                             <h5 class="mb-0">Transaction History</h5>
                           </div>
                           <div class="card-body p-0">
                             <div class="table-responsive">
                               <table class="table table-hover mb-0">
                                 <thead class="bg-light">
                                   <tr>
                                     <th>Date & Time</th>
                                     <th>Description</th>
                                     <th class="text-end">Amount</th>
                                     <th class="text-center">Type</th>
                                   </tr>
                                 </thead>
                                 <tbody>
                                   <% if (Array.isArray(user.walletHistory) && user.walletHistory.length > 0) { %>
                                     <% user.walletHistory.sort((a, b) => new Date(b.date) - new Date(a.date)).forEach(transaction => { %>
                                       <tr>
                                         <td class="align-middle">
                                           <div><%= new Date(transaction.date).toLocaleDateString('en-IN', { 
                                             year: 'numeric', 
                                             month: 'short', 
                                             day: 'numeric'
                                           }) %></div>
                                           <small class="text-muted"><%= new Date(transaction.date).toLocaleTimeString('en-IN', {
                                             hour: '2-digit',
                                             minute: '2-digit'
                                           }) %></small>
                                         </td>
                                         <td class="align-middle">
                                           <%= transaction.description %>
                                           <% if (transaction.orderId) { %>
                                             <small class="text-muted d-block">Order: #<%= transaction.orderId %></small>
                                           <% } %>
                                           <% if (transaction.paymentId) { %>
                                             <small class="text-muted d-block">Payment: <%= transaction.paymentId %></small>
                                           <% } %>
                                         </td>
                                         <td class="align-middle text-end <%= transaction.type === 'credit' ? 'text-success' : 'text-danger' %> fw-bold">
                                           <%= transaction.type === 'credit' ? '+' : '-' %>â‚¹<%= transaction.amount.toLocaleString('en-IN') %>
                                         </td>
                                         <td class="align-middle text-center">
                                           <span class="badge rounded-pill <%= transaction.type === 'credit' ? 'bg-success' : 'bg-danger' %>">
                                             <%= transaction.type.toUpperCase() %>
                                           </span>
                                         </td>
                                       </tr>
                                     <% }); %>
                                   <% } else { %>
                                     <tr>
                                       <td colspan="4" class="text-center py-4 text-muted">
                                         <i class="fas fa-inbox fa-2x mb-3 d-block"></i>
                                         No transactions found
                                       </td>
                                     </tr>
                                   <% } %>
                                 </tbody>
                               </table>
                             </div>
                           </div>
                         </div>
                       </div>
                     </div>
                   </div>
                 </div>
               </div>


               <div class="tab-pane fade" id="referal" role="tabpanel" aria-labelledby="track-orders-tab">
                 <div class="card">
                   <div class="card-header">
                     <h5 class="mb-0">Referal</h5>
                   </div>
                   <div class="card-body">
                     <h6 class="mb-3">Refer your friends and earn money!</h6>
                     <p>Share this link: <strong>></strong></p>
                     <p>Earned: â‚¹</p>
                   </div>
                 </div>
       </div>
     </div>
   </div>
 </section>
</main>

<!-- Order Details Modal
<div class="modal fade" id="orderDetailsModal" tabindex="-1" aria-labelledby="orderDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="orderDetailsModalLabel">Order Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="order-info mb-4">
                    <div class="row">
                        <div class="col-md-6">
                            <p><strong>Order ID:</strong> <span id="modalOrderId"></span></p>
                            <p><strong>Order Date:</strong> <span id="modalOrderDate"></span></p>
                            <p><strong>Status:</strong> <span id="modalOrderStatus" class="badge"></span></p>
                        </div>
                        <div class="col-md-6 text-md-end">
                            <a href="#" id="downloadInvoiceBtn" class="btn btn-primary" target="_blank">
                                <i class="fas fa-download"></i> Download Invoice
                            </a>
                        </div>
                    </div>
                </div>
                <div class="row mb-4">
                  <div class="col-md-6">
                    <p>
                      <strong>Payment Method:</strong> 
                      <span id="modalPaymentMethodIcon"></span>
                      <span id="modalPaymentMethod"></span>
                    </p>
                    <p><strong>Total Amount:</strong> â‚¹<span id="modalOrderTotal"></span></p>
                    <p id="modalOrderDiscount" style="display: none;">
                      <strong>Discount Applied:</strong> â‚¹<span id="modalDiscountAmount"></span>
                    </p>
                  </div>
                  <div class="col-md-6">
                    <h6>Shipping Address</h6>
                    <div id="modalShippingAddress"></div>
                  </div>
                </div>
                <div class="table-responsive">
                  <table class="table">
                    <thead>
                      <tr>
                        <th>Product</th>
                        <th>Quantity</th>
                        <th>Price</th>
                        <th>Total</th>
                      </tr>
                    </thead>
                    <tbody id="modalOrderItems">
                    </tbody>
                    <tfoot>
                      <tr>
                        <td colspan="3" class="text-end"><strong>Subtotal:</strong></td>
                        <td>â‚¹<span id="modalSubtotal"></span></td>
                      </tr>
                      <tr id="modalDiscountRow" style="display: none;">
                        <td colspan="3" class="text-end"><strong>Discount:</strong></td>
                        <td class="text-success">-â‚¹<span id="modalDiscountTotal"></span></td>
                      </tr>
                      <tr>
                        <td colspan="3" class="text-end"><strong>Total:</strong></td>
                        <td><strong>â‚¹<span id="modalFinalTotal"></span></strong></td>
                      </tr>
                    </tfoot>
                  </table>
                </div>
            </div>
        </div>
    </div>
</div> -->
<!-- Order Details Modal -->
<div class="modal fade" id="orderDetailsModal" tabindex="-1" aria-labelledby="orderDetailsModalLabel" aria-hidden="true">
  <div class="modal-dialog">
      <div class="modal-content">
          <div class="modal-header bg-light py-2">
              <h5 class="modal-title" id="orderDetailsModalLabel">
                  <i class="fas fa-shopping-bag me-2"></i>Order Details
              </h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body p-3">
              <div class="order-info mb-3 p-2 bg-light rounded">
                  <div class="row align-items-center">
                      <div class="col-8">
                          <div class="d-flex align-items-center mb-1">
                              <i class="fas fa-hashtag text-primary me-2"></i>
                              <small><strong>Order ID:</strong> <span id="modalOrderId"></span></small>
                          </div>
                          <div class="d-flex align-items-center mb-1">
                              <i class="far fa-calendar-alt text-primary me-2"></i>
                              <small><strong>Order Date:</strong> <span id="modalOrderDate"></span></small>
                          </div>
                          <div class="d-flex align-items-center">
                              <i class="fas fa-info-circle text-primary me-2"></i>
                              <small><strong>Status:</strong> <span id="modalOrderStatus" class="badge ms-1"></span></small>
                          </div>
                      </div>
                      <div class="col-4 text-end">
                          <a href="#" id="downloadInvoiceBtn" class="btn btn-sm btn-primary" target="_blank">
                              <i class="fas fa-download me-1"></i>Invoice
                          </a>
                      </div>
                  </div>
              </div>
              <div class="row mb-3">
                  <div class="col-md-6">
                      <div class="payment-details p-2 bg-light rounded">
                          <h6 class="border-bottom pb-2 mb-2 fs-7">Payment Info</h6>
                          <div class="d-flex align-items-center mb-1">
                              <i class="fas fa-credit-card text-primary me-2"></i>
                              <small class="mb-0">
                                  <strong>Method:</strong> 
                                  <span id="modalPaymentMethodIcon"></span>
                                  <span id="modalPaymentMethod"></span>
                              </small>
                          </div>
                          <div class="d-flex align-items-center mb-1">
                              <i class="fas fa-rupee-sign text-primary me-2"></i>
                              <small class="mb-0"><strong>Amount:</strong> â‚¹<span id="modalOrderTotal"></span></small>
                          </div>
                          <div class="d-flex align-items-center" id="modalOrderDiscount" style="display: none;">
                              <i class="fas fa-tags text-primary me-2"></i>
                              <small class="mb-0"><strong>Discount:</strong> â‚¹<span id="modalDiscountAmount"></span></small>
                          </div>
                      </div>
                  </div>
                  <div class="col-md-6">
                      <div class="shipping-details p-2 bg-light rounded">
                          <h6 class="border-bottom pb-2 mb-2 fs-7">
                              <i class="fas fa-shipping-fast me-2"></i>Shipping Info
                          </h6>
                          <div id="modalShippingAddress" class="small"></div>
                      </div>
                  </div>
              </div>
              <div class="table-responsive">
                  <table class="table table-sm table-hover">
                      <thead class="table-light">
                          <tr>
                              <th class="py-2">Product</th>
                              <th class="py-2">Qty</th>
                              <th class="py-2">Price</th>
                              <th class="py-2">Total</th>
                          </tr>
                      </thead>
                      <tbody id="modalOrderItems">
                      </tbody>
                      <tfoot class="table-light">
                          <tr>
                              <td colspan="3" class="text-end py-2"><small><strong>Subtotal:</strong></small></td>
                              <td class="py-2"><small>â‚¹<span id="modalSubtotal"></span></small></td>
                          </tr>
                          <tr id="modalDiscountRow" style="display: none;">
                              <td colspan="3" class="text-end py-2"><small><strong>Discount:</strong></small></td>
                              <td class="text-success py-2"><small>-â‚¹<span id="modalDiscountTotal"></span></small></td>
                          </tr>
                          <tr>
                              <td colspan="3" class="text-end py-2"><strong>Total:</strong></td>
                              <td class="py-2"><strong>â‚¹<span id="modalFinalTotal"></span></strong></td>
                          </tr>
                      </tfoot>
                  </table>
              </div>
          </div>
      </div>
  </div>
</div>

<style>
.modal-content {
    border: none;
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
}

.modal-header {
    border-bottom: 1px solid #f8f9fa;
}

.badge {
    padding: 0.3em 0.6em;
    font-weight: 500;
    font-size: 0.75rem;
}

.table > :not(caption) > * > * {
    padding: 0.5rem;
}

.table-hover tbody tr:hover {
    background-color: rgba(0, 0, 0, 0.02);
}

.bg-light {
    background-color: #f8f9fa !important;
}

.text-primary {
    color: #e94e77 !important;
}

.btn-primary {
    background: linear-gradient(to right, #f9a826, #e94e77);
    border: none;
    transition: all 0.3s ease;
}

.btn-primary:hover {
    background: linear-gradient(to right, #e94e77, #f9a826);
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.shipping-details, .payment-details {
    height: 100%;
}

#modalShippingAddress {
    font-size: 0.85rem;
    line-height: 1.4;
}

.fas, .far {
    width: 16px;
    text-align: center;
    font-size: 0.9rem;
}

.fs-7 {
    font-size: 0.9rem;
}

.table-sm td, .table-sm th {
    font-size: 0.85rem;
}
</style>

<!-- Return Modal -->
<div class="modal fade" id="returnModal" tabindex="-1" aria-labelledby="returnModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="returnModalLabel">Return Order</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="returnForm" onsubmit="submitReturn(event)">
                    <input type="hidden" id="returnOrderId" name="orderId">
                    <div class="mb-3">
                        <label for="returnReason" class="form-label">Please explain the reason for return</label>
                        <textarea class="form-control" id="returnReason" name="returnReason" rows="3" required placeholder="Enter your reason for returning the order"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="submit" form="returnForm" class="btn btn-primary">Submit Return Request</button>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
    // Address Functions
    function editAddress(addressId) {
        Swal.fire({
            title: 'Edit Address',
            text: 'Do you want to edit this address?',
            icon: 'question',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#6c757d',
            confirmButtonText: 'Yes, edit it!',
            cancelButtonText: 'Cancel'
        }).then((result) => {
            if (result.isConfirmed) {
                window.location.href = `/editAddress?id=${addressId}`;
            }
        });
    }

    function deleteAddress(addressId) {
        Swal.fire({
            title: 'Delete Address?',
            text: 'This action cannot be undone!',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#dc3545',
            cancelButtonColor: '#6c757d',
            confirmButtonText: 'Yes, delete it!',
            cancelButtonText: 'No, keep it'
        }).then((result) => {
            if (result.isConfirmed) {
                window.location.href = `/deleteAddress?id=${addressId}`;
            }
        });
    }

    async function addMoneyToWallet() {
        try {
            const { value: amount } = await Swal.fire({
                title: 'Enter amount to add',
                input: 'number',
                inputLabel: 'Amount (â‚¹)',
                inputPlaceholder: 'Enter amount',
                inputAttributes: {
                    min: '1',
                    step: '1'
                },
                showCancelButton: true,
                inputValidator: (value) => {
                    if (!value || value < 1) {
                        return 'Please enter a valid amount greater than 0'
                    }
                }
            });

            if (amount) {
                // Create Razorpay order
                const response = await fetch('/wallet/recharge', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ amount: amount })
                });

                const data = await response.json();

                if (!data.success) {
                    throw new Error(data.message || 'Error creating order');
                }

                // Configure Razorpay options
                const options = {
                    key: data.key_id,
                    amount: data.order.amount,
                    currency: data.order.currency,
                    name: 'Scentify',
                    description: 'Wallet Recharge',
                    order_id: data.order.id,
                    handler: async function (response) {
                        try {
                            // Verify payment
                            const verifyResponse = await fetch('/wallet/verify', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({
                                    razorpay_payment_id: response.razorpay_payment_id,
                                    razorpay_order_id: response.razorpay_order_id,
                                    razorpay_signature: response.razorpay_signature,
                                    amount: amount
                                })
                            });

                            const verifyData = await verifyResponse.json();

                            if (verifyData.success) {
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Success!',
                                    text: 'Money added to wallet successfully!',
                                    showConfirmButton: false,
                                    timer: 1500
                                }).then(() => {
                                    // Update wallet balance display
                                    const walletBalanceElement = document.getElementById('walletBalance');
                                    if (walletBalanceElement) {
                                        walletBalanceElement.textContent = `â‚¹${verifyData.newBalance}`;
                                    }
                                });
                            } else {
                                throw new Error(verifyData.message || 'Payment verification failed');
                            }
                        } catch (error) {
                            console.error('Payment verification error:', error);
                            Swal.fire({
                                icon: 'error',
                                title: 'Error!',
                                text: error.message || 'Error verifying payment'
                            });
                        }
                    },
                    prefill: {
                        name: '<%= user.name %>',
                        email: '<%= user.email %>',
                    },
                    theme: {
                        color: "#3399cc"
                    }
                };

                // Create Razorpay instance and open payment modal
                const rzp = new Razorpay(options);
                rzp.open();
            }
        } catch (error) {
            console.error('Error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error!',
                text: error.message || 'Something went wrong'
            });
        }
    }

    document.addEventListener('DOMContentLoaded', function() {
        // View Order Button Click Handler
        const viewButtons = document.querySelectorAll('.view-order-btn');
        viewButtons.forEach(button => {
            button.addEventListener('click', function() {
                const orderId = this.getAttribute('data-order-id');
                fetchOrderDetails(orderId);
            });
        });

        // Function to fetch order details
        function fetchOrderDetails(orderId) {
            fetch(`/orders/get-details/${orderId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        populateModal(data.order);
                        new bootstrap.Modal(document.getElementById('orderDetailsModal')).show();
                    } else {
                        Swal.fire('Error', data.message || 'Failed to fetch order details', 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    Swal.fire('Error', 'Something went wrong', 'error');
                });
        }

        // Function to populate modal with order details
        function populateModal(order) {
            // Order Information
            const orderId = order.orderId;
            document.getElementById('modalOrderId').textContent = orderId;
            document.getElementById('modalOrderDate').textContent = new Date(order.createdOn).toLocaleDateString();
            document.getElementById('modalOrderStatus').textContent = order.status;

            // Update download invoice button
            const downloadBtn = document.getElementById('downloadInvoiceBtn');
            downloadBtn.href = `/orders/download-invoice/${orderId}`;
            
            // Disable download button for cancelled or returned orders
            if (order.status === 'Cancelled' || order.status === 'Returned') {
                downloadBtn.classList.add('disabled');
                downloadBtn.classList.remove('btn-primary');
                downloadBtn.classList.add('btn-secondary');
                downloadBtn.setAttribute('title', 'Invoice not available for cancelled or returned orders');
            } else {
                downloadBtn.classList.remove('disabled');
                downloadBtn.classList.add('btn-primary');
                downloadBtn.classList.remove('btn-secondary');
                downloadBtn.removeAttribute('title');
            }

            // Set payment method with icon
            const paymentMethodIcon = document.getElementById('modalPaymentMethodIcon');
            const paymentMethod = order.paymentMethod.toLowerCase();
            let icon = '';
            
            if (paymentMethod.includes('cod') || paymentMethod.includes('cash')) {
                icon = '<i class="fas fa-money-bill-wave text-success me-2"></i>';
            } else if (paymentMethod.includes('online') || paymentMethod.includes('razorpay')) {
                icon = '<i class="fas fa-credit-card text-primary me-2"></i>';
            } else if (paymentMethod.includes('wallet')) {
                icon = '<i class="fas fa-wallet text-info me-2"></i>';
            } else {
                icon = '<i class="fas fa-question-circle text-secondary me-2"></i>';
            }
            
            paymentMethodIcon.innerHTML = icon;
            document.getElementById('modalPaymentMethod').textContent = order.paymentMethod;
            
            document.getElementById('modalOrderTotal').textContent = order.finalAmount.toLocaleString();

            // Discount Information
            if (order.discount > 0) {
                document.getElementById('modalOrderDiscount').style.display = 'block';
                document.getElementById('modalDiscountAmount').textContent = order.discount.toLocaleString();
                document.getElementById('modalDiscountRow').style.display = 'table-row';
                document.getElementById('modalDiscountTotal').textContent = order.discount.toLocaleString();
            } else {
                document.getElementById('modalOrderDiscount').style.display = 'none';
                document.getElementById('modalDiscountRow').style.display = 'none';
            }

            // Shipping Address
            const addressHtml = order.address ? `
                <p><strong>${order.address.name}</strong></p>
                <p>${order.address.landMark}</p>
                <p>${order.address.city}, ${order.address.state} ${order.address.pincode}</p>
                <p><strong>Phone:</strong> ${order.address.phone}</p>
            ` : '<p>No address information available</p>';
            document.getElementById('modalShippingAddress').innerHTML = addressHtml;

            // Order Items
            const itemsHtml = order.orderedItems.map(item => `
                <tr>
                    <td>
                        <div class="product-cell">
                            <div class="product-image">
                                <img src="/uploads/re-image/${item.product.productImage[0]}" 
                                     alt="${item.product.productName}" 
                                     class="img-fluid" 
                                     style="max-width: 60px;">
                            </div>
                            <div class="product-info">
                                <h6 class="product-name">${item.product.productName}</h6>
                                ${item.discountPercentage > 0 ? 
                                    `<div class="offer-details">
                                        <small class="text-success">
                                            ${item.discountPercentage}% OFF 
                                            (${item.offerType === 'category' ? 'Category Offer' : 
                                               item.offerType === 'product' ? 'Product Offer' : 
                                               item.offerType === 'sale' ? 'Sale Price' : ''})
                                        </small>
                                    </div>` : ''}
                            </div>
                        </div>
                    </td>
                    <td>${item.quantity}</td>
                    <td>
                        ${item.discountPercentage > 0 ? 
                            `<span class="text-muted text-decoration-line-through">â‚¹${item.regularPrice.toLocaleString()}</span><br>` : ''}
                        <span class="text-primary">â‚¹${item.finalPrice.toLocaleString()}</span>
                    </td>
                    <td>â‚¹${item.totalItemPrice.toLocaleString()}</td>
                </tr>
            `).join('');
            document.getElementById('modalOrderItems').innerHTML = itemsHtml;

            // Totals
            document.getElementById('modalSubtotal').textContent = order.subtotal.toLocaleString();
            document.getElementById('modalFinalTotal').textContent = order.finalAmount.toLocaleString();
        }

        // Add event listener for cancel buttons
        const cancelButtons = document.querySelectorAll('.cancel-order-btn');
        cancelButtons.forEach(button => {
            button.addEventListener('click', function() {
                const orderId = this.getAttribute('data-order-id');
                cancelOrder(orderId);
            });
        });
    });

    async function retryPayment(orderId) {
        try {
            const response = await fetch('/retry-payment', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ orderId })
            });

            const data = await response.json();
            if (data.success) {
                var options = {
                    key: data.key_id,
                    amount: data.amount,
                    currency: data.currency,
                    name: data.name,
                    description: data.description,
                    order_id: data.order_id,
                    prefill: data.prefill,
                    handler: function(payment) {
                        verifyRetryPayment(payment, orderId);
                    },
                    modal: {
                        ondismiss: function() {
                            Swal.fire({
                                icon: 'error',
                                title: 'Payment Cancelled',
                                text: 'You can retry the payment from your orders page'
                            });
                        }
                    },
                    theme: {
                        color: "#3399cc"
                    }
                };
                var rzp = new Razorpay(options);
                rzp.on('payment.failed', function() {
                    Swal.fire({
                        icon: 'error',
                        title: 'Payment Failed',
                        text: 'You can retry the payment from your orders page'
                    });
                });
                rzp.open();
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: data.message || 'Failed to initiate payment retry'
                });
            }
        } catch (error) {
            console.error('Error retrying payment:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Failed to process payment retry'
            });
        }
    }

    function verifyRetryPayment(payment, orderId) {
        console.log('Verifying payment:', { payment, orderId });
        
        const verificationData = {
            razorpay_payment_id: payment.razorpay_payment_id,
            razorpay_order_id: payment.razorpay_order_id,
            razorpay_signature: payment.razorpay_signature,
            orderId: orderId
        };
        
        $.ajax({
            url: '/checkout/verify-payment',
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            data: JSON.stringify(verificationData),
            success: function(response) {
                console.log('Verification response:', response);
                if (response.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Payment Successful',
                        text: 'Your payment has been completed successfully',
                        showConfirmButton: false,
                        timer: 1500
                    }).then(() => {
                        window.location.reload();
                    });
                } else {
                    console.error('Payment verification failed:', response.message);
                    Swal.fire({
                        icon: 'error',
                        title: 'Payment Failed',
                        text: response.message || 'Failed to verify payment. Please contact support if amount is deducted.',
                        confirmButtonText: 'OK'
                    }).then(() => {
                        window.location.reload();
                    });
                }
            },
            error: function(xhr) {
                console.error('Payment verification error:', xhr.responseText);
                let errorMessage = 'Failed to verify payment';
                try {
                    const response = JSON.parse(xhr.responseText);
                    errorMessage = response.message || errorMessage;
                } catch (e) {
                    console.error('Error parsing error response:', e);
                }
                
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: errorMessage + ' Please contact support if amount is deducted.',
                    confirmButtonText: 'OK'
                }).then(() => {
                    window.location.reload();
                });
            }
        });
    }

    function cancelOrder(orderId) {
        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, cancel it!'
        }).then((result) => {
            if (result.isConfirmed) {
                fetch('/orders/cancel', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ orderId: orderId })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        let message = data.message;
                        if (data.refundAmount) {
                            message += `. â‚¹${data.refundAmount} has been refunded to your wallet. New wallet balance: â‚¹${data.newWalletBalance}`;
                            // Update wallet balance display if it exists
                            const walletBalanceElement = document.getElementById('walletBalance');
                            if (walletBalanceElement) {
                                walletBalanceElement.textContent = `â‚¹${data.newWalletBalance}`;
                            }
                        }
                        Swal.fire({
                            title: 'Cancelled!',
                            text: message,
                            icon: 'success',
                            showConfirmButton: false,
                            timer: 2500
                        }).then(() => {
                            location.reload();
                        });
                    } else {
                        Swal.fire(
                            'Error!',
                            data.message,
                            'error'
                        );
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    Swal.fire(
                        'Error!',
                        'Failed to cancel order',
                        'error'
                    );
                });
            }
        });
    }

    function showReturnModal(orderId) {
        console.log('Opening return modal for order:', orderId);
        document.getElementById('returnOrderId').value = orderId;
        document.getElementById('returnReason').value = ''; // Clear previous input
        new bootstrap.Modal(document.getElementById('returnModal')).show();
    }

    function submitReturn(event) {
        event.preventDefault();
        const orderId = document.getElementById('returnOrderId').value;
        const returnReason = document.getElementById('returnReason').value.trim();

        console.log('Submitting return request:', {
            orderId,
            returnReason
        });

        if (!returnReason) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Please provide a reason for return'
            });
            return;
        }

        // Show loading state
        Swal.fire({
            title: 'Submitting Return Request...',
            text: 'Please wait while we process your request',
            allowOutsideClick: false,
            didOpen: () => {
                Swal.showLoading();
            }
        });

        fetch('/submit-return-request', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify({
                orderId,
                returnReason
            })
        })
        .then(response => {
            if (!response.ok) {
                return response.json().then(data => {
                    throw new Error(data.message || 'Failed to submit return request');
                });
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // Close the modal first
                const modal = bootstrap.Modal.getInstance(document.getElementById('returnModal'));
                if (modal) {
                    modal.hide();
                }

                // Show success message and reload
                Swal.fire({
                    icon: 'success',
                    title: 'Success!',
                    text: 'Return request submitted successfully',
                    confirmButtonText: 'OK'
                }).then((result) => {
                    location.reload();
                });
            } else {
                throw new Error(data.message || 'Failed to submit return request');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message || 'Failed to submit return request'
            });
        });
    }
</script>

<style>
.modal-lg {
    max-width: 900px;
}

.product-cell {
    display: flex;
    align-items: center;
    gap: 15px;
}

.product-image {
    width: 60px;
    height: 60px;
    border-radius: 4px;
    overflow: hidden;
}

.product-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.product-name {
    margin: 0;
    font-size: 14px;
    color: #333;
}

.modal-body h6 {
    color: #333;
    font-weight: 600;
    margin-bottom: 15px;
}

.modal-body p {
    margin-bottom: 8px;
    color: #666;
}

.modal-body strong {
    color: #333;
}

.table th {
    background: #f8f9fa;
}

.modal-content {
    border: none;
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
}

.modal-header {
    border-bottom: 2px solid #f8f9fa;
}

.badge {
    padding: 0.5em 1em;
    font-weight: 500;
}

.table > :not(caption) > * > * {
    padding: 1rem;
}

.table-hover tbody tr:hover {
    background-color: rgba(0, 0, 0, 0.02);
}

.bg-light {
    background-color: #f8f9fa !important;
}

.text-primary {
    color: #e94e77 !important;
}

.btn-primary {
    background: linear-gradient(to right, #f9a826, #e94e77);
    border: none;
    transition: all 0.3s ease;
}

.btn-primary:hover {
    background: linear-gradient(to right, #e94e77, #f9a826);
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.shipping-details, .payment-details {
    height: 100%;
}

#modalShippingAddress {
    font-size: 0.95rem;
    line-height: 1.6;
}

.fas, .far {
    width: 20px;
    text-align: center;
}

.fs-7 {
    font-size: 0.9rem;
}

.table-sm td, .table-sm th {
    font-size: 0.85rem;
}
</style>

<%- include("../../views/partials/user/footer") %>
