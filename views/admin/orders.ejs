<%- include("../../views/partials/admin/header") %>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <h3 class="card-title">Order Management</h3>
                        <div class="btn-group">
                            <a href="/admin/orderList" class="btn btn-outline-primary <%= !filterType ? 'active' : '' %>">
                                All Orders
                            </a>
                            <a href="/admin/orders/cancelled" class="btn btn-outline-danger <%= filterType === 'cancelled' ? 'active' : '' %>">
                                Cancelled Orders
                            </a>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <% if (error) { %>
                        <div class="alert alert-danger" role="alert">
                            <%= error %>
                        </div>
                    <% } %>
                    
                    <div class="table-responsive">
                        <table class="table table-bordered table-striped" id="ordersTable">
                            <thead>
                                <tr>
                                    <th>Order ID</th>
                                    <th>Customer</th>
                                    <th>Date</th>
                                    <th>Status</th>
                                    <th>Total</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% orders.forEach(order => { %>
                                    <tr>
                                        <td><%= order._id %></td>
                                        <td><%= order.userName %></td>
                                        <td><%= new Date(order.createdOn).toLocaleDateString() %></td>
                                        <td>
                                            <select class="form-select status-select" 
                                                    data-order-id="<%= order._id.toString() %>"
                                                    <%= order.status === 'Cancelled' || order.status === 'Returned' ? 'disabled' : '' %>>
                                                <option value="Pending" <%= order.status === 'Pending' ? 'selected' : '' %>>Pending</option>
                                                <option value="Processing" <%= order.status === 'Processing' ? 'selected' : '' %>>Processing</option>
                                                <option value="Shipped" <%= order.status === 'Shipped' ? 'selected' : '' %>>Shipped</option>
                                                <option value="Delivered" <%= order.status === 'Delivered' ? 'selected' : '' %>>Delivered</option>
                                                <option value="Cancelled" <%= order.status === 'Cancelled' ? 'selected' : '' %>>Cancelled</option>
                                                <% if (order.status === 'Return Request') { %>
                                                    <option value="Return Request" selected>Return Request</option>
                                                    <option value="Returned">Returned</option>
                                                <% } %>
                                            </select>
                                            <% if (order.status === 'Return Request') { %>
                                                <small class="text-muted d-block mt-1">
                                                    <i class="fas fa-info-circle"></i> Return requested by customer
                                                </small>
                                            <% } %>
                                        </td>
                                        <td>â‚¹<%= order.finalAmount ? order.finalAmount.toLocaleString('en-IN', {
                                            minimumFractionDigits: 2,
                                            maximumFractionDigits: 2
                                        }) : '0.00' %></td>
                                        <td>
                                            <a href="/admin/orders/<%= order._id %>" 
                                               class="btn btn-info btn-sm">
                                                View
                                            </a>
                                        </td>
                                    </tr>
                                <% }); %>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- SweetAlert2 -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
// Define valid status transitions (same as backend)
const validStatusTransitions = {
    'Pending': ['Processing', 'Cancelled'],
    'Processing': ['Shipped', 'Cancelled'],
    'Shipped': ['Delivered', 'Cancelled'],
    'Delivered': [], // Admin can't initiate return request
    'Return Request': ['Returned', 'Cancelled'], // Admin can only approve or cancel return requests
    'Returned': [], // No further transitions allowed
    'Cancelled': [] // No further transitions allowed
};

// Initialize DataTable when document is ready
document.addEventListener('DOMContentLoaded', function() {
    // Check if DataTable is available
    if ($.fn.DataTable) {
        console.log('DataTable plugin is loaded');
        try {
            let table = $('#ordersTable').DataTable({
                order: [[2, "desc"]], 
                pageLength: 10,
                language: {
                    lengthMenu: "Show _MENU_ entries per page",
                    zeroRecords: "No matching records found",
                    info: "Showing _START_ to _END_ of _TOTAL_ entries",
                    infoEmpty: "No records available",
                    infoFiltered: "(filtered from _MAX_ total records)",
                    search: "Search:",
                    paginate: {
                        first: "First",
                        last: "Last",
                        next: "Next",
                        previous: "Previous"
                    }
                }
            });
            console.log('DataTable initialized successfully');
        } catch (error) {
            console.error('Error initializing DataTable:', error);
        }
    } else {
        console.error('DataTable plugin is not loaded');
    }

    // Function to update status options based on current status
    function updateStatusOptions($select) {
        const currentStatus = $select.find('option[selected]').val() || $select.val();
        const allowedNextStatuses = validStatusTransitions[currentStatus] || [];
        
        // Disable all options first
        $select.find('option').each(function() {
            const $option = $(this);
            const statusValue = $option.val();
            
            // Always show current status
            if (statusValue === currentStatus) {
                $option.show().prop('disabled', false);
                return;
            }
            
            // For Return Request status, show specific options
            if (currentStatus === 'Return Request' && ['Returned', 'Cancelled'].includes(statusValue)) {
                $option.show().prop('disabled', false);
                return;
            }
            
            // Show and enable only valid next statuses
            if (allowedNextStatuses.includes(statusValue)) {
                $option.show().prop('disabled', false);
            } else {
                $option.hide().prop('disabled', true);
            }
        });

        // Add visual indicator for return requests
        const $container = $select.parent();
        const $note = $container.find('.return-note');
        if (currentStatus === 'Return Request') {
            if (!$note.length) {
                $container.append('<small class="text-muted d-block mt-1 return-note"><i class="fas fa-info-circle"></i> Return requested by customer</small>');
            }
        } else {
            $note.remove();
        }
    }

    // Initialize status options for all selects
    $('.status-select').each(function() {
        updateStatusOptions($(this));
    });

    // Add event listeners to all status select dropdowns
    $('.status-select').on('change', function() {
        console.log('Status changed');
        const $select = $(this);
        const orderId = $select.data('orderId');
        const newStatus = $select.val();
        const oldStatus = $select.find('option[selected]').val() || 
                         $select.find('option[selected]').val();

        console.log('Order ID:', orderId);
        console.log('New Status:', newStatus);
        console.log('Old Status:', oldStatus);

        // Check if the status transition is valid
        const allowedNextStatuses = validStatusTransitions[oldStatus] || [];
        if (!allowedNextStatuses.includes(newStatus)) {
            Swal.fire({
                icon: 'error',
                title: 'Invalid Status Change',
                text: `Cannot change order status from ${oldStatus} to ${newStatus}. Allowed next statuses are: ${allowedNextStatuses.join(', ')}`
            });
            $select.val(oldStatus);
            return;
        }

        Swal.fire({
            title: 'Are you sure?',
            text: `Do you want to change the order status to ${newStatus}?`,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, change it!'
        }).then((result) => {
            if (result.isConfirmed) {
                // Show loading state
                Swal.fire({
                    title: 'Updating Status...',
                    allowOutsideClick: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });

                // Make API call
                $.ajax({
                    url: '/admin/orders/update-status',
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    data: JSON.stringify({
                        orderId: orderId,
                        status: newStatus
                    }),
                    success: function(response) {
                        console.log('Response:', response);
                        if (response.success) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Updated!',
                                text: response.message || 'Order status has been updated successfully'
                            }).then(() => {
                                // Update the select options before reloading
                                updateStatusOptions($select);
                                window.location.reload();
                            });
                        } else {
                            throw new Error(response.message || 'Failed to update status');
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error('Error:', error);
                        console.error('Response:', xhr.responseText);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error!',
                            text: xhr.responseJSON?.message || 'Failed to update order status'
                        });
                        // Revert to old status
                        $select.val(oldStatus);
                        updateStatusOptions($select);
                    }
                });
            } else {
                // If user cancels, revert to old status
                $select.val(oldStatus);
            }
        });
    });
});
</script>

<style>
.status-select {
    min-width: 140px;
}

.form-select:disabled {
    background-color: #e9ecef;
    opacity: 0.65;
}

.btn-group .btn.active {
    z-index: 1;
}

.table th {
    white-space: nowrap;
}
</style>

<%- include("../../views/partials/admin/footer") %>