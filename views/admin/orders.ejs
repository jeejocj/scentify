<%- include("../../views/partials/admin/header") %>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <h3 class="card-title">Order Management</h3>
                        <div class="btn-group">
                            <a href="/admin/orderList" class="btn btn-outline-primary <%= !filterType ? 'active' : '' %>">
                                All Orders
                            </a>
                            <a href="/admin/orders/cancelled" class="btn btn-outline-danger <%= filterType === 'cancelled' ? 'active' : '' %>">
                                Cancelled Orders
                            </a>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <% if (error) { %>
                        <div class="alert alert-danger" role="alert">
                            <%= error %>
                        </div>
                    <% } %>
                    
                    <div class="table-responsive">
                        <table class="table table-bordered table-striped" id="ordersTable">
                            <thead>
                                <tr>
                                    <th>Order ID</th>
                                    <th>Customer</th>
                                    <th>Date</th>
                                    <th>Status</th>
                                    <th>Total</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% orders.forEach(order => { %>
                                    <tr>
                                        <td>#<%= order.orderId %></td>
                                        <td><%= order.userName %></td>
                                        <td><%= new Date(order.createdOn).toLocaleDateString() %></td>
                                        <td>
                                            <select class="form-select status-select" 
                                                    data-order-id="<%= order._id %>" 
                                                    data-payment-status="<%= order.paymentStatus %>"
                                                    data-amount="<%= order.finalAmount %>"
                                                    <%= order.status === 'Delivered' || 
                                                        order.status === 'Cancelled' || 
                                                        order.status === 'Returned' || 
                                                        order.returnRequest?.status !== 'None' ? 'disabled' : '' %>>
                                                <option value="Pending" <%= order.status === 'Pending' ? 'selected' : '' %>>Pending</option>
                                                <option value="Processing" <%= order.status === 'Processing' ? 'selected' : '' %>>Processing</option>
                                                <option value="Shipped" <%= order.status === 'Shipped' ? 'selected' : '' %>>Shipped</option>
                                                <option value="Delivered" <%= order.status === 'Delivered' ? 'selected' : '' %>>Delivered</option>
                                                <option value="Cancelled" <%= order.status === 'Cancelled' ? 'selected' : '' %>>Cancelled</option>
                                                <option value="Return Pending" <%= order.status === 'Return Pending' ? 'selected' : '' %>>Return Pending</option>
                                                <option value="Returned" <%= order.status === 'Returned' ? 'selected' : '' %>>Returned</option>
                                            </select>
                                        </td>
                                        <td>â‚¹<%= order.finalAmount ? order.finalAmount.toLocaleString('en-IN', {
                                            minimumFractionDigits: 2,
                                            maximumFractionDigits: 2
                                        }) : '0.00' %></td>
                                        <td>
                                            <a href="/admin/orders/<%= order._id %>" 
                                               class="btn btn-info btn-sm">
                                                View
                                            </a>
                                            <% if (order.returnRequest && order.returnRequest.status === 'Pending') { %>
                                                <div class="return-actions mt-2">
                                                    <button class="btn btn-success btn-sm" onclick="handleReturnRequest('<%= order._id %>', 'approve')">
                                                        <i class="fas fa-check"></i> Approve Return
                                                    </button>
                                                    <button class="btn btn-danger btn-sm" onclick="handleReturnRequest('<%= order._id %>', 'reject')">
                                                        <i class="fas fa-times"></i> Reject Return
                                                    </button>
                                                </div>
                                            <% } %>
                                            
                                            <% if (order.returnRequest && order.returnRequest.status !== 'None') { %>
                                                <div class="return-status mt-2">
                                                    <span class="badge bg-<%= order.returnRequest.status === 'Approved' ? 'success' : 
                                                                              order.returnRequest.status === 'Rejected' ? 'danger' : 
                                                                              'warning' %>">
                                                        Return <%= order.returnRequest.status %>
                                                    </span>
                                                </div>
                                            <% } %>
                                        </td>
                                    </tr>
                                <% }); %>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- SweetAlert2 -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
// Define valid status transitions (same as backend)
const validStatusTransitions = {
    'Pending': ['Processing', 'Cancelled'],
    'Processing': ['Shipped', 'Cancelled'],
    'Shipped': ['Delivered', 'Cancelled'],
    'Delivered': [], // Admin can't initiate return request
    'Return Request': ['Returned', 'Cancelled'], // Admin can only approve or cancel return requests
    'Returned': [], // No further transitions allowed
    'Cancelled': [] // No further transitions allowed
};

// Initialize DataTable when document is ready
document.addEventListener('DOMContentLoaded', function() {
    // Check if DataTable is available
    if ($.fn.DataTable) {
        try {
            let table = $('#ordersTable').DataTable({
                order: [[2, "desc"]], 
                pageLength: 10,
                language: {
                    lengthMenu: "Show _MENU_ entries per page",
                    zeroRecords: "No matching records found",
                    info: "Showing _START_ to _END_ of _TOTAL_ entries",
                    infoEmpty: "No records available",
                    infoFiltered: "(filtered from _MAX_ total records)",
                    search: "Search:",
                    paginate: {
                        first: "First",
                        last: "Last",
                        next: "Next",
                        previous: "Previous"
                    }
                }
            });
        } catch (error) {
            console.error('Error initializing DataTable:', error);
        }
    } else {
        console.error('DataTable plugin is not loaded');
    }

    // Function to update status options based on current status
    function updateStatusOptions($select) {
        const currentStatus = $select.find('option[selected]').val() || $select.val();
        const allowedNextStatuses = validStatusTransitions[currentStatus] || [];
        
        // Disable all options first
        $select.find('option').each(function() {
            const $option = $(this);
            const statusValue = $option.val();
            
            // Always show current status
            if (statusValue === currentStatus) {
                $option.show().prop('disabled', false);
                return;
            }
            
            // For Return Request status, show specific options
            if (currentStatus === 'Return Request' && ['Returned', 'Cancelled'].includes(statusValue)) {
                $option.show().prop('disabled', false);
                return;
            }
            
            // Show and enable only valid next statuses
            if (allowedNextStatuses.includes(statusValue)) {
                $option.show().prop('disabled', false);
            } else {
                $option.hide().prop('disabled', true);
            }
        });

        // Add visual indicator for return requests
        const $container = $select.parent();
        const $note = $container.find('.return-note');
        if (currentStatus === 'Return Request') {
            if (!$note.length) {
                $container.append('<small class="text-muted d-block mt-1 return-note"><i class="fas fa-info-circle"></i> Return requested by customer</small>');
            }
        } else {
            $note.remove();
        }
    }

    // Initialize status options for all selects
    $('.status-select').each(function() {
        updateStatusOptions($(this));
    });

    // Add event listeners to all status select dropdowns
    $('.status-select').on('change', function() {
        const $select = $(this);
        const orderId = $select.data('orderId');
        const newStatus = $select.val();
        const oldStatus = $select.find('option[selected]').val() || 
                         $select.find('option[selected]').val();

        async function updateOrderStatus(orderId, newStatus) {
            let confirmMessage = `Are you sure you want to change the order status to ${newStatus}?`;
            let confirmTitle = 'Update Status';
            
            if (newStatus === 'Cancelled') {
                const orderDetails = document.querySelector(`[data-order-id="${orderId}"]`);
                const paymentStatus = orderDetails?.dataset.paymentStatus;
                const orderAmount = orderDetails?.dataset.amount;
                
                if (paymentStatus === 'Completed') {
                    confirmTitle = 'Cancel Order & Process Refund';
                    confirmMessage = `This will cancel the order and refund â‚¹${orderAmount} to the customer's wallet. Continue?`;
                }
            }

            const result = await Swal.fire({
                title: confirmTitle,
                text: confirmMessage,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: newStatus === 'Cancelled' ? '#dc3545' : '#3085d6',
                cancelButtonColor: '#6c757d',
                confirmButtonText: newStatus === 'Cancelled' ? 'Yes, cancel it!' : 'Yes, update it!',
                cancelButtonText: 'No, keep it'
            });

            if (result.isConfirmed) {
                try {
                    const response = await fetch('/admin/orders/update-status', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            orderId,
                            status: newStatus
                        })
                    });

                    const data = await response.json();

                    if (data.success) {
                        Swal.fire({
                            title: 'Success!',
                            text: data.message,
                            icon: 'success',
                            timer: 1500,
                            showConfirmButton: false
                        }).then(() => {
                            window.location.reload();
                        });
                    } else {
                        Swal.fire({
                            title: 'Error!',
                            text: data.message,
                            icon: 'error'
                        });
                    }
                } catch (error) {
                    console.error('Error:', error);
                    Swal.fire({
                        title: 'Error!',
                        text: 'Something went wrong. Please try again.',
                        icon: 'error'
                    });
                }
            }
        }

        // Check if the status transition is valid
        const allowedNextStatuses = validStatusTransitions[oldStatus] || [];
        if (!allowedNextStatuses.includes(newStatus)) {
            Swal.fire({
                icon: 'error',
                title: 'Invalid Status Change',
                html: `Cannot change order status from <b>${oldStatus}</b> to <b>${newStatus}</b>.<br>Allowed next statuses are: <b>${allowedNextStatuses.join(', ')}</b>`,
                customClass: {
                    popup: 'swal2-popup',
                    title: 'swal2-title',
                    htmlContainer: 'swal2-html-container',
                    confirmButton: 'swal2-confirm',
                    icon: 'swal2-icon swal2-error'
                }
            });
            $select.val(oldStatus);
            return;
        }

        updateOrderStatus(orderId, newStatus);
    });
});

async function handleReturnRequest(orderId, action) {
    const actionText = action === 'approve' ? 'approve' : 'reject';
    const result = await Swal.fire({
        title: `Confirm ${actionText}?`,
        text: `Are you sure you want to ${actionText} this return request?`,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: action === 'approve' ? '#28a745' : '#dc3545',
        cancelButtonColor: '#6c757d',
        confirmButtonText: `Yes, ${actionText} it!`,
        cancelButtonText: 'Cancel'
    });

    if (result.isConfirmed) {
        try {
            const response = await fetch(`/admin/return-request/${orderId}/${action}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            const data = await response.json();

            if (data.success) {
                Swal.fire({
                    title: 'Success!',
                    text: data.message,
                    icon: 'success',
                    timer: 1500,
                    showConfirmButton: false
                }).then(() => {
                    window.location.reload();
                });
            } else {
                Swal.fire({
                    title: 'Error!',
                    text: data.message,
                    icon: 'error'
                });
            }
        } catch (error) {
            console.error('Error:', error);
            Swal.fire({
                title: 'Error!',
                text: 'Something went wrong. Please try again.',
                icon: 'error'
            });
        }
    }
}
</script>

<style>
.status-select {
    padding: 0.375rem 0.75rem;
    border-radius: 4px;
    border: 1px solid #ced4da;
    width: 100%;
}

.status-select:disabled {
    background-color: #e9ecef;
    cursor: not-allowed;
    opacity: 0.8;
}

.status-select option {
    padding: 8px;
}

/* Status-specific styles */
.status-select[data-status="Cancelled"] {
    border-color: #dc3545;
    color: #dc3545;
    background-color: #f8d7da;
}

.status-select[data-status="Delivered"] {
    border-color: #198754;
    color: #198754;
    background-color: #d1e7dd;
}

.status-select[data-status="Returned"] {
    border-color: #6c757d;
    color: #6c757d;
    background-color: #e2e3e5;
}

.status-select[data-status="Return Pending"] {
    border-color: #ffc107;
    color: #997404;
    background-color: #fff3cd;
}

.status-select {
    min-width: 140px;
}

.form-select:disabled {
    background-color: #e9ecef;
    opacity: 0.65;
}

.btn-group .btn.active {
    z-index: 1;
}

.table th {
    white-space: nowrap;
}

/* SweetAlert Custom Styles */
.swal2-popup {
    background: #1f2937 !important;
    color: #ffffff !important;
    border: 1px solid #374151 !important;
}

.swal2-title {
    color: #ffffff !important;
    font-size: 1.5rem !important;
}

.swal2-html-container {
    color: #e5e7eb !important;
}

.swal2-confirm {
    background: #3b82f6 !important;
    color: #ffffff !important;
    padding: 8px 20px !important;
}

.swal2-cancel {
    background: #ef4444 !important;
    color: #ffffff !important;
    padding: 8px 20px !important;
}

.swal2-icon {
    border-color: currentColor !important;
}

.swal2-icon.swal2-warning {
    border-color: #f59e0b !important;
    color: #f59e0b !important;
}

.swal2-icon.swal2-error {
    border-color: #ef4444 !important;
    color: #ef4444 !important;
}

.swal2-icon.swal2-success {
    border-color: #10b981 !important;
    color: #10b981 !important;
}

.swal2-icon.swal2-info {
    border-color: #3b82f6 !important;
    color: #3b82f6 !important;
}

.swal2-icon.swal2-question {
    border-color: #8b5cf6 !important;
    color: #8b5cf6 !important;
}

/* Loading animation color */
.swal2-loader {
    border-color: #3b82f6 transparent #3b82f6 transparent !important;
}

.return-actions {
    display: flex;
    gap: 10px;
}

.return-actions button {
    display: flex;
    align-items: center;
    gap: 5px;
}

.return-actions i {
    font-size: 0.875rem;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Set data-status attribute for all selects
    const statusSelects = document.querySelectorAll('.status-select');
    statusSelects.forEach(select => {
        const currentStatus = select.value;
        select.setAttribute('data-status', currentStatus);
    });

    // Update data-status when selection changes
    statusSelects.forEach(select => {
        select.addEventListener('change', function() {
            this.setAttribute('data-status', this.value);
        });
    });
});
</script>

<%- include("../../views/partials/admin/footer") %>