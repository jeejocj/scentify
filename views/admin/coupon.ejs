<%- include("../../views/partials/admin/header") %>
<style>
.content-main {
    padding: 30px;
    background-color: #f8f9fa;
}

.content-header {
    margin-bottom: 20px;
}

.content-title {
    color: #2c3e50;
    font-weight: 600;
    font-size: 1.8rem;
    margin-bottom: 10px;
}

.error-message {
    color: red;
    margin-top: 5px;
    display: none;
}

.form-label {
    margin-bottom: 8px;
}

.form-control {
    width: 100%;
    padding: 8px;
    margin-bottom: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
    box-sizing: border-box;
}

.btn-primary {
    background-color: #007bff;
    color: #fff;
    border: 1px solid #007bff;
    border-radius: 5px;
    padding: 10px 20px;
    cursor: pointer;
    transition: all 0.3s ease;
}

.btn-primary:hover {
    background-color: #0056b3;
    border-color: #0056b3;
    transform: translateY(-1px);
}

.add-coupon-container {
    margin-bottom: 20px;
}

.add-coupon-btn {
    padding: 8px 20px;
    background-color: #3498db;
    color: white;
    border: none;
    border-radius: 4px;
    font-size: 0.9rem;
    transition: all 0.3s ease;
}

.add-coupon-btn:hover {
    background-color: #2980b9;
    transform: translateY(-1px);
}

.add-coupon-btn i {
    margin-right: 5px;
}
</style>

<section class="content-main">
    <div class="content-header">
        <h2 class="content-title">Coupons</h2>
    </div>
    <div class="add-coupon-container">
        <button type="button" class="add-coupon-btn" data-bs-toggle="modal" data-bs-target="#addCouponModal">
            <i class="fas fa-plus"></i> Add New Coupon
        </button>
    </div>
    <div class="card">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>Coupon Code</th>
                            <th>Discount</th>
                            <th>Min Purchase</th>
                            <th>Created On</th>
                            <th>Expiry Date</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% coupons.forEach(coupon => { %>
                        <tr>
                            <td><%= coupon.name %></td>
                            <td>₹<%= coupon.offerPrice %></td>
                            <td>₹<%= coupon.minimumPrice %></td>
                            <td><%= new Date(coupon.createdOn).toLocaleDateString() %></td>
                            <td><%= new Date(coupon.expireOn).toLocaleDateString() %></td>
                            <td>
                                <% 
                                    const now = new Date();
                                    const startDate = new Date(coupon.createdOn);
                                    const expiryDate = new Date(coupon.expireOn);
                                    
                                    // Reset time parts to compare only dates
                                    now.setHours(0, 0, 0, 0);
                                    startDate.setHours(0, 0, 0, 0);
                                    expiryDate.setHours(0, 0, 0, 0);
                                    
                                    let status, badgeClass;
                                    
                                    if (now < startDate) {
                                        status = 'Upcoming';
                                        badgeClass = 'warning';
                                    } else if (now > expiryDate) {
                                        status = 'Expired';
                                        badgeClass = 'danger';
                                    } else {
                                        status = 'Active';
                                        badgeClass = 'success';
                                    }
                                %>
                                <span class="badge bg-<%= badgeClass %>">
                                    <%= status %>
                                </span>
                            </td>
                            <td>
                                <div class="d-flex gap-2">
                                    <button class="btn btn-sm btn-outline-primary" onclick="editCoupon('<%= coupon._id %>')">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button class="btn btn-sm btn-outline-danger" onclick="deleteCoupon('<%= coupon._id %>')">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                        <% }); %>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</section>

<!-- Add Coupon Modal -->
<div class="modal fade" id="addCouponModal" tabindex="-1" aria-labelledby="addCouponModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addCouponModalLabel">Add New Coupon</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="addCouponForm" onsubmit="handleFormSubmit(event)">
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="coupon-name" class="form-label">Coupon Code</label>
                        <input type="text" id="coupon-name" name="couponName" class="form-control" 
                            placeholder="e.g., SUMMER2024" required />
                        <div id="error-coupon-name" class="error-message"></div>
                    </div>

                    <div class="mb-3">
                        <label for="offerPrice" class="form-label">Discount Amount (₹)</label>
                        <div class="input-group">
                            <span class="input-group-text">₹</span>
                            <input type="number" id="offerPrice" name="offerPrice" class="form-control" 
                                min="0" placeholder="e.g., 500" required />
                        </div>
                        <div id="error-discount" class="error-message"></div>
                    </div>

                    <div class="mb-3">
                        <label for="minimumPrice" class="form-label">Minimum Purchase Amount</label>
                        <div class="input-group">
                            <span class="input-group-text">₹</span>
                            <input type="number" id="minimumPrice" name="minimumPrice" class="form-control" 
                                min="0" placeholder="e.g., 1000" required />
                        </div>
                        <div id="error-min-amount" class="error-message"></div>
                    </div>

                    <div class="mb-3">
                        <label for="startDate" class="form-label">Start Date</label>
                        <input type="date" id="startDate" name="startDate" class="form-control" 
                            placeholder="Select start date" required />
                        <div id="error-start-date" class="error-message"></div>
                    </div>

                    <div class="mb-3">
                        <label for="endDate" class="form-label">Expiry Date</label>
                        <input type="date" id="endDate" name="endDate" class="form-control" 
                            placeholder="Select expiry date" required />
                        <div id="error-end-date" class="error-message"></div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Add Coupon</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    function validateForm() {
        let isValid = true;
        const couponName = document.getElementById('coupon-name').value;
        const offerPrice = document.getElementById('offerPrice').value;
        const minimumPrice = document.getElementById('minimumPrice').value;
        const startDate = document.getElementById('startDate').value;
        const endDate = document.getElementById('endDate').value;

        // Reset error messages
        document.querySelectorAll('.error-message').forEach(el => el.style.display = 'none');

        // Validate coupon name
        if (!/^[A-Z0-9]+$/.test(couponName)) {
            document.getElementById('error-coupon-name').textContent = 'Coupon code must contain only uppercase letters and numbers';
            document.getElementById('error-coupon-name').style.display = 'block';
            isValid = false;
        }

        // Validate discount amount
        if (offerPrice <= 0) {
            document.getElementById('error-discount').textContent = 'Discount amount must be greater than 0';
            document.getElementById('error-discount').style.display = 'block';
            isValid = false;
        }

        // Validate minimum purchase amount
        if (minimumPrice <= 0) {
            document.getElementById('error-min-amount').textContent = 'Minimum purchase amount must be greater than 0';
            document.getElementById('error-min-amount').style.display = 'block';
            isValid = false;
        }

        // Validate dates
        const start = new Date(startDate);
        const end = new Date(endDate);
        const today = new Date();
        
        // Reset time part for accurate date comparison
        today.setHours(0, 0, 0, 0);
        start.setHours(0, 0, 0, 0);
        end.setHours(0, 0, 0, 0);

        if (start < today) {
            document.getElementById('error-start-date').textContent = 'Start date must be today or a future date';
            document.getElementById('error-start-date').style.display = 'block';
            isValid = false;
        }

        if (end <= start) {
            document.getElementById('error-end-date').textContent = 'End date must be after start date';
            document.getElementById('error-end-date').style.display = 'block';
            isValid = false;
        }

        return isValid;
    }

    async function handleFormSubmit(event) {
        event.preventDefault();
        
        if (!validateForm()) {
            return;
        }

        // Show loading animation
        Swal.fire({
            title: 'Creating Coupon...',
            html: 'Please wait while we process your request',
            allowOutsideClick: false,
            didOpen: () => {
                Swal.showLoading();
            }
        });

        const formData = new FormData(event.target);
        const formDataObject = {};
        formData.forEach((value, key) => {
            formDataObject[key] = value;
        });

        try {
            const response = await fetch('/admin/createcoupon', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(formDataObject)
            });

            const data = await response.json();

            if (response.ok) {
                // Success notification
                Swal.fire({
                    title: 'Success!',
                    text: 'Coupon created successfully',
                    icon: 'success',
                    showConfirmButton: false,
                    timer: 1500,
                    timerProgressBar: true,
                    didClose: () => {
                        // Reset form and close modal
                        document.getElementById('addCouponForm').reset();
                        bootstrap.Modal.getInstance(document.getElementById('addCouponModal')).hide();
                        // Reload page
                        window.location.reload();
                    }
                });
            } else {
                throw new Error(data.message || 'Failed to create coupon');
            }
        } catch (error) {
            // Error notification
            Swal.fire({
                title: 'Oops...',
                text: error.message || 'Something went wrong!',
                icon: 'error',
                confirmButtonText: 'Try Again',
                showClass: {
                    popup: 'animate__animated animate__shakeX'
                },
                hideClass: {
                    popup: 'animate__animated animate__fadeOut'
                }
            });
        }
    }

    function setDefaultStartDate() {
        const today = new Date();
        const startDateInput = document.getElementById("startDate");
        startDateInput.min = today.toISOString().split("T")[0];
        startDateInput.value = today.toISOString().split("T")[0];
    }

    function editCoupon(couponId) {
        window.location.href = `/admin/editcoupon?id=${couponId}`;
    }

    function deleteCoupon(couponId) {
        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, delete it!'
        }).then((result) => {
            if (result.isConfirmed) {
                fetch(`/admin/deletecoupon/${couponId}`, {
                    method: 'DELETE'
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire(
                            'Deleted!',
                            'Coupon has been deleted.',
                            'success'
                        ).then(() => {
                            window.location.reload();
                        });
                    } else {
                        Swal.fire(
                            'Error!',
                            'Failed to delete coupon.',
                            'error'
                        );
                    }
                });
            }
        });
    }

    // Initialize date inputs when modal opens
    document.getElementById('addCouponModal').addEventListener('show.bs.modal', function (event) {
        setDefaultStartDate();
    });
</script>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
<%- include("../../views/partials/admin/footer") %>
