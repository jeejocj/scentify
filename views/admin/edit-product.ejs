<%- include("../../views/partials/admin/header") %>
<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
    <style>
        /* SweetAlert Custom Styles */
        .swal2-popup {
            background: #ffffff !important;
            color: #000000 !important;
        }
        .swal2-title {
            color: #000000 !important;
        }
        .swal2-content {
            color: #000000 !important;
        }
        .swal2-html-container {
            color: #000000 !important;
        }
        .swal2-confirm {
            background-color: #3085d6 !important;
            color: #ffffff !important;
        }
        .swal2-cancel {
            background-color: #d33 !important;
            color: #ffffff !important;
        }
    </style>
</head>
<style>
    .error-message {
        color: #dc3545;
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }

    .content-main {
        background-color: #f8f9fa;
        min-height: 100vh;
        padding: 2rem;
    }

    .card {
        border: none;
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
        margin-bottom: 1.5rem;
    }

    .card-header {
        background-color: #fff;
        border-bottom: 1px solid #e9ecef;
        padding: 1.25rem;
    }

    .card-body {
        padding: 1.5rem;
    }

    .form-label {
        font-weight: 500;
        color: #495057;
        margin-bottom: 0.5rem;
    }

    .form-control {
        border: 1px solid #ced4da;
        border-radius: 0.375rem;
        padding: 0.75rem;
        transition: border-color 0.15s ease-in-out;
    }

    .form-control:focus {
        border-color: #86b7fe;
        box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
    }

    .thumbnails-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
        gap: 1rem;
        margin-top: 1rem;
    }

    .thumbnail-wrapper {
        position: relative;
        padding-top: 100%;
        background-color: #f8f9fa;
        border-radius: 0.5rem;
        overflow: hidden;
        border: 2px dashed #dee2e6;
    }

    .thumbnail {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        object-fit: cover;
        border-radius: 0.5rem;
    }

    .delete-btn {
        position: absolute;
        top: 0.5rem;
        right: 0.5rem;
        background: rgba(220, 53, 69, 0.9);
        color: white;
        border: none;
        border-radius: 50%;
        width: 24px;
        height: 24px;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1rem;
        transition: all 0.2s ease;
        z-index: 1;
    }

    .delete-btn:hover {
        background: #dc3545;
        transform: scale(1.1);
    }

    .btn-primary {
        background-color: #0d6efd;
        border-color: #0d6efd;
        color: white;
        padding: 0.75rem 1.5rem;
        border-radius: 0.375rem;
        font-weight: 500;
        transition: all 0.2s ease;
    }

    .btn-primary:hover {
        background-color: #0b5ed7;
        border-color: #0a58ca;
    }

    .form-section {
        margin-bottom: 2rem;
    }

    .form-section-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: #212529;
        margin-bottom: 1rem;
    }

    .current-images {
        margin-bottom: 1.5rem;
    }

    .current-image-item {
        position: relative;
        display: inline-block;
        margin-right: 1rem;
        margin-bottom: 1rem;
    }

    .current-image-item img {
        width: 100px;
        height: 100px;
        object-fit: cover;
        border-radius: 0.5rem;
        border: 2px solid #dee2e6;
    }

    .remove-image {
        position: absolute;
        top: -0.5rem;
        right: -0.5rem;
        background: rgba(220, 53, 69, 0.9);
        color: white;
        border: none;
        border-radius: 50%;
        width: 24px;
        height: 24px;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1rem;
    }

    .remove-image:hover {
        background: #dc3545;
    }

    .image-upload-container {
        border: 2px dashed #dee2e6;
        border-radius: 0.5rem;
        padding: 1rem;
        cursor: pointer;
    }

    .image-upload-icon {
        font-size: 2rem;
        margin-bottom: 1rem;
    }

    .image-upload-text {
        font-size: 1rem;
        color: #495057;
    }

    .image-upload-container.is-invalid {
        border-color: #dc3545;
    }
    .image-upload-container.is-invalid .image-upload-icon i {
        color: #dc3545;
    }
</style>

<section class="content-main">
    <div class="row">
        <div class="col-12">
            <div class="content-header">
                <h2 class="content-title">Edit Product</h2>
            </div>
        </div>
        <div class="col-lg-8">
            <form method="post" action="/admin/product/edit/<%= product._id %>" enctype="multipart/form-data" id="editProductForm" onsubmit="handleSubmit(event)">
                <div class="card">
                    <div class="card-body">
                        <div class="form-section">
                            <div class="form-section-title">Basic Information</div>
                            <div class="mb-4">
                                <label for="product_name" class="form-label">Product Name</label>
                                <input type="text" placeholder="Enter product name" name="productName" class="form-control" id="product_name" value="<%= product.productName %>" required>
                                <div id="productName-error" class="error-message"></div>
                            </div>
                            
                            <div class="mb-4">
                                <label for="descriptionid" class="form-label">Description</label>
                                <textarea class="form-control" id="descriptionid" name="description" rows="4" placeholder="Enter product description" required><%= product.description %></textarea>
                                <div id="description-error" class="error-message"></div>
                            </div>
                        </div>

                        <div class="form-section">
                            <div class="form-section-title">Product Details</div>
                            <div class="row">
                                <div class="col-md-6 mb-4">
                                    <label class="form-label">Brand</label>
                                    <select class="form-select" name="brand" required>
                                        <% for(let i = 0; i < brand.length; i++) { %>
                                            <option value="<%= brand[i]._id %>" <%= product.brand && product.brand.equals(brand[i]._id) ? 'selected' : '' %>>
                                                <%= brand[i].brandName %>
                                            </option>
                                        <% } %>
                                    </select>
                                </div>
                                <div class="col-md-6 mb-4">
                                    <label class="form-label">Category</label>
                                    <select class="form-select" name="category" required>
                                        <% for(let i = 0; i < cat.length; i++) { %>
                                            <option value="<%= cat[i]._id %>" 
                                                <%= (product.category && product.category._id && product.category._id.toString() === cat[i]._id.toString()) ? 'selected' : '' %>>
                                                <%= cat[i].name %>
                                            </option>
                                        <% } %>
                                    </select>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-6 mb-4">
                                    <label class="form-label">Regular Price</label>
                                    <input type="number" class="form-control" name="regularPrice" value="<%= product.regularPrice %>" required>
                                    <div id="regularPrice-error" class="error-message"></div>
                                </div>
                                <div class="col-md-6 mb-4">
                                    <label class="form-label">Sale Price</label>
                                    <input type="number" class="form-control" name="salePrice" value="<%= product.salePrice %>">
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-6 mb-4">
                                    <label class="form-label">Quantity</label>
                                    <input type="number" class="form-control" name="quantity" value="<%= product.quantity %>" required>
                                    <div id="quantity-error" class="error-message"></div>
                                </div>
                            </div>
                        </div>

                        <div class="form-section">
                            <div class="form-section-title">Product Images</div>
                            
                            <div class="thumbnails-container">
                                <% for(let i = 0; i < product.productImage.length; i++) { %>
                                    <div class="thumbnail-wrapper" data-image="<%= product.productImage[i] %>">
                                        <img src="/uploads/product-images/<%= product.productImage[i] %>" alt="Product image" class="thumbnail">
                                        <button type="button" class="delete-btn" onclick="deleteSingleImage('<%= product.productImage[i] %>', '<%= product._id %>')">
                                            <i class="fas fa-times"></i>
                                        </button>
                                    </div>
                                <% } %>
                            </div>

                            <div class="image-upload-container">
                                <div class="image-upload-icon">
                                    <i class="fas fa-cloud-upload-alt"></i>
                                </div>
                                <input type="file" class="form-control" id="imageInput" accept="image/*" onchange="handleImageUpload(event)" multiple>
                                <div class="image-upload-text">
                                    Drag & drop images or click to select. Max 4 images, each less than 5MB (JPG, JPEG, PNG)
                                </div>
                                <div id="images-error" class="error-message"></div>
                            </div>
                            <input type="hidden" name="images" id="selectedImages">
                        </div>

                        <div class="text-end">
                            <a href="/admin/products" class="btn btn-secondary me-2">
                                <i class="fas fa-times me-1"></i> Close
                            </a>
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-save me-1"></i> Update Product
                            </button>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>
</section>

<div class="modal fade" id="cropModal" tabindex="-1" aria-labelledby="cropModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cropModalLabel">Crop Image</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="img-container">
                    <img id="cropImage" src="" alt="Image to crop">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="cropButton">
                    <span id="cropButtonText">Crop & Save</span>
                    <span id="cropButtonSpinner" class="spinner-border spinner-border-sm d-none"></span>
                </button>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    let selectedFiles = [];
    let currentFile = null;
    let cropper = null;
    let isProcessing = false;
    let showValidation = false;

    function validateField(field, errorId, message) {
        const errorElement = document.getElementById(errorId);
        if (!field.value.trim()) {
            errorElement.textContent = message;
            field.classList.add('is-invalid');
            return false;
        }
        errorElement.textContent = '';
        field.classList.remove('is-invalid');
        return true;
    }

    function clearValidation() {
        showValidation = false;
        const errorElements = document.querySelectorAll('.error-message');
        errorElements.forEach(element => {
            element.textContent = '';
        });
        const invalidFields = document.querySelectorAll('.is-invalid');
        invalidFields.forEach(field => {
            field.classList.remove('is-invalid');
        });
    }

    async function handleSubmit(event) {
        event.preventDefault();
        showValidation = true;
        
        const form = event.target;
        const formData = new FormData(form);
        let isValid = true;

        // Validate product name
        const productName = form.querySelector('#product_name');
        if (!validateField(productName, 'productName-error', 'Product name is required')) {
            isValid = false;
        }

        // Validate description
        const description = form.querySelector('#descriptionid');
        if (!validateField(description, 'description-error', 'Description is required')) {
            isValid = false;
        }

        // Validate regular price
        const regularPrice = form.querySelector('input[name="regularPrice"]');
        if (!regularPrice.value || regularPrice.value <= 0) {
            document.getElementById('regularPrice-error').textContent = 'Regular price must be greater than 0';
            regularPrice.classList.add('is-invalid');
            isValid = false;
        }

        // Validate quantity
        const quantity = form.querySelector('input[name="quantity"]');
        if (!quantity.value || quantity.value < 0) {
            document.getElementById('quantity-error').textContent = 'Quantity must be 0 or greater';
            quantity.classList.add('is-invalid');
            isValid = false;
        }

        // Validate minimum images
        const currentImages = document.querySelectorAll('.thumbnail-wrapper').length;
        if (currentImages < 3) {
            document.getElementById('images-error').textContent = 'Minimum 3 images are required';
            isValid = false;
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Minimum 3 images are required'
            });
            return;
        }

        if (!isValid) {
            return;
        }

        try {
            const response = await fetch(form.action, {
                method: 'POST',
                body: formData
            });

            const result = await response.json();

            if (result.success) {
                clearValidation();
                Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: result.message,
                    showConfirmButton: false,
                    timer: 1500
                }).then(() => {
                    window.location.href = '/admin/products';
                });
            } else {
                throw new Error(result.message || 'Failed to update product');
            }
        } catch (error) {
            console.error('Error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message || 'Failed to update product'
            });
        }
    }

    async function deleteSingleImage(imageName, productId) {
        try {
            const result = await Swal.fire({
                title: 'Delete Image',
                text: 'Are you sure you want to delete this image?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, delete it!'
            });

            if (result.isConfirmed) {
                const response = await fetch('/admin/deleteImage', {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ imageName, productId })
                });

                const data = await response.json();

                if (data.success) {
                    const imageElement = document.querySelector(`[data-image="${imageName}"]`);
                    if (imageElement) {
                        imageElement.remove();
                    }
                    Swal.fire('Deleted!', 'Image has been deleted.', 'success');
                } else {
                    throw new Error(data.message);
                }
            }
        } catch (error) {
            console.error('Error:', error);
            Swal.fire('Error!', error.message || 'Failed to delete image', 'error');
        }
    }

    function handleImageUpload(event) {
        const files = Array.from(event.target.files);
        const currentImages = document.querySelectorAll('.thumbnail-wrapper').length;
        
        if (currentImages + files.length > 4) {
            document.getElementById('images-error').textContent = 'Maximum 4 images allowed';
            event.target.value = '';
            return;
        }

        files.forEach(file => {
            if (currentImages + selectedFiles.length >= 4) return;
            
            if (file.size > 5 * 1024 * 1024) {
                document.getElementById('images-error').textContent = 'Each image must be less than 5MB';
                return;
            }

            // Get the file extension and convert to lowercase
            const fileExtension = file.name.split('.').pop().toLowerCase();
            const allowedExtensions = ['jpg', 'jpeg', 'png'];

            if (!allowedExtensions.includes(fileExtension)) {
                document.getElementById('images-error').textContent = 'Only JPG, JPEG, and PNG files are allowed';
                return;
            }

            currentFile = file;
            const reader = new FileReader();
            reader.onload = function(e) {
                const image = document.getElementById('cropImage');
                image.src = e.target.result;
                
                if (cropper) {
                    cropper.destroy();
                }

                const cropModal = new bootstrap.Modal(document.getElementById('cropModal'));
                cropModal.show();

                cropper = new Cropper(image, {
                    aspectRatio: 1,
                    viewMode: 1,
                    dragMode: 'move',
                    autoCropArea: 1,
                    restore: false,
                    guides: true,
                    center: true,
                    highlight: false,
                    cropBoxMovable: true,
                    cropBoxResizable: true,
                    toggleDragModeOnDblclick: false,
                    minContainerWidth: 500,
                    minContainerHeight: 500,
                    minCropBoxWidth: 400,
                    minCropBoxHeight: 400,
                    ready: function() {
                        const containerData = this.cropper.getContainerData();
                        const cropBoxData = this.cropper.getCropBoxData();
                        const containerWidth = containerData.width;
                        const containerHeight = containerData.height;
                        
                        this.cropper.setCropBoxData({
                            left: (containerWidth - 400) / 2,
                            top: (containerHeight - 400) / 2,
                            width: 400,
                            height: 400
                        });
                    }
                });
            };
            reader.readAsDataURL(file);
        });

        event.target.value = '';
    }

    function cleanupCropper() {
        if (cropper) {
            cropper.destroy();
            cropper = null;
        }
        const image = document.getElementById('cropImage');
        image.src = '';
        currentFile = null;
        isProcessing = false;
    }

    document.getElementById('cropButton').addEventListener('click', async function() {
        if (!cropper || !currentFile || isProcessing) return;

        isProcessing = true;
        const button = this;
        const text = document.getElementById('cropButtonText');
        const spinner = document.getElementById('cropButtonSpinner');

        button.disabled = true;
        text.classList.add('d-none');
        spinner.classList.remove('d-none');

        try {
            const canvas = cropper.getCroppedCanvas({
                width: 800,
                height: 800,
                imageSmoothingEnabled: true,
                imageSmoothingQuality: 'high'
            });

            const blob = await new Promise(resolve => {
                canvas.toBlob(resolve, currentFile.type, 1.0);
            });

            if (!blob) {
                throw new Error('Failed to create blob');
            }

            const croppedFile = new File([blob], currentFile.name, {
                type: currentFile.type,
                lastModified: Date.now()
            });

            const formData = new FormData();
            formData.append('images', croppedFile);
            formData.append('productId', '<%= product._id %>');

            const response = await fetch('/admin/addProductImage', {
                method: 'POST',
                body: formData
            });

            if (!response.ok) {
                throw new Error('Failed to upload image');
            }

            const data = await response.json();
            
            if (data.success) {
                const thumbnailsContainer = document.querySelector('.thumbnails-container');
                const newThumbnail = document.createElement('div');
                newThumbnail.className = 'thumbnail-wrapper';
                newThumbnail.dataset.image = data.imageName;
                newThumbnail.innerHTML = `
                    <img src="/uploads/product-images/${data.imageName}" alt="Product image" class="thumbnail">
                    <button type="button" class="delete-btn" onclick="deleteSingleImage('${data.imageName}', '<%= product._id %>')">
                        <i class="fas fa-times"></i>
                    </button>
                `;
                thumbnailsContainer.appendChild(newThumbnail);

                await Swal.fire({
                    icon: 'success',
                    title: 'Success!',
                    text: 'Image uploaded successfully',
                    showConfirmButton: false,
                    timer: 1500
                });
            }

            const modalElement = document.getElementById('cropModal');
            bootstrap.Modal.getInstance(modalElement).hide();
            cleanupCropper();

        } catch (error) {
            console.error('Error processing image:', error);
            await Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message || 'Failed to process image'
            });
        } finally {
            button.disabled = false;
            text.classList.remove('d-none');
            spinner.classList.add('d-none');
            isProcessing = false;
        }
    });

    // Add input event listeners for real-time validation
    document.getElementById('product_name').addEventListener('input', function() {
        if (showValidation) {
            validateField(this, 'productName-error', 'Product name is required');
        }
    });

    document.getElementById('descriptionid').addEventListener('input', function() {
        if (showValidation) {
            validateField(this, 'description-error', 'Description is required');
        }
    });

    document.querySelector('input[name="regularPrice"]').addEventListener('input', function() {
        if (showValidation) {
            const errorElement = document.getElementById('regularPrice-error');
            if (!this.value || this.value <= 0) {
                errorElement.textContent = 'Regular price must be greater than 0';
                this.classList.add('is-invalid');
            } else {
                errorElement.textContent = '';
                this.classList.remove('is-invalid');
            }
        }
    });

    document.querySelector('input[name="quantity"]').addEventListener('input', function() {
        if (showValidation) {
            const errorElement = document.getElementById('quantity-error');
            if (!this.value || this.value < 0) {
                errorElement.textContent = 'Quantity must be 0 or greater';
                this.classList.add('is-invalid');
            } else {
                errorElement.textContent = '';
                this.classList.remove('is-invalid');
            }
        }
    });

    // Add event listener for close button
    document.querySelector('a[href="/admin/products"]').addEventListener('click', async function(event) {
        event.preventDefault();
        showValidation = true;
        let isValid = true;

        // Validate product name
        const productName = document.querySelector('#product_name');
        if (!validateField(productName, 'productName-error', 'Product name is required')) {
            isValid = false;
        }

        // Validate description
        const description = document.querySelector('#descriptionid');
        if (!validateField(description, 'description-error', 'Description is required')) {
            isValid = false;
        }

        // Validate regular price
        const regularPrice = document.querySelector('input[name="regularPrice"]');
        if (!regularPrice.value || regularPrice.value <= 0) {
            document.getElementById('regularPrice-error').textContent = 'Regular price must be greater than 0';
            regularPrice.classList.add('is-invalid');
            isValid = false;
        }

        // Validate quantity
        const quantity = document.querySelector('input[name="quantity"]');
        if (!quantity.value || quantity.value < 0) {
            document.getElementById('quantity-error').textContent = 'Quantity must be 0 or greater';
            quantity.classList.add('is-invalid');
            isValid = false;
        }

        // Validate minimum images
        const currentImages = document.querySelectorAll('.thumbnail-wrapper').length;
        if (currentImages < 3) {
            document.getElementById('images-error').textContent = 'Minimum 3 images are required';
            isValid = false;
            await Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Minimum 3 images are required'
            });
            return;
        }

        if (!isValid) {
            return;
        }

        // Clear validation state and navigate
        clearValidation();
        window.location.href = '/admin/products';
    });
</script>

<%- include("../../views/partials/admin/footer") %>
